#!/usr/bin/env node
var fs = require('fs');
var path = require('path');
var program = require('commander');
var sourceNode = require('../lib/compiler/sourceNode').sourceNode;
var Compiler = require('../lib/index').Compiler;

program
  .usage('[options] <file ...>')
  .option('-o, --output [file]', 'output file name, if not specified will write to stdout.')
  .option('-s, --source-map', 'generate source map.')
  .option('--as-module', 'compile as module.')
  .option('--ecma-version [version]', 'compilation target (5 or 6).')
  .option('--draw-ast', 'draw ast tree of file.')
  .parse(process.argv);

if (program.args.length == 0) {
  program.outputHelp();
  process.exit(0);
}

var compiler, i;

compiler = new Compiler({
  asModule: program.asModule,
  ecmaVersion: program.ecmaVersion || 5
});

var sources = program.args.map(function (file) {
  var code = fs.readFileSync(file, {encoding: 'utf8'});
  return [path.basename(file), code];
});

if (program.drawAst) {
  for (i = 0; i < sources.length; i++) {
    try {
      if (sources.length > 1) {
        console.log('');
        console.log('#');
        console.log('#', sources[i][0]);
        console.log('#');
      }
      console.log(compiler.drawAstTree(sources[i][0], sources[i][1]));
    } catch (e) {
      console.error(e.message);
      return;
    }
  }
  return;
}

var node = sourceNode('');
for (i = 0; i < sources.length; i++) {
  try {
    node.add(compiler.compile(sources[i][0], sources[i][1]));
  } catch (e) {
    console.error(e.message);
    return;
  }
}

if (program.output) {
  var file = program.output,
    filename = path.basename(file),
    sourceMapFileName = filename + '.map',
    sourceMapPath = file + '.map';

  if (program.sourceMap) {
    var output = node.toStringWithSourceMap({
      file: filename
    });

    var smu = '//# sourceMappingURL=' + sourceMapFileName + '\n';

    fs.writeFileSync(file, output.code + smu, {encoding: 'utf8'});
    fs.writeFileSync(sourceMapPath, output.map, {encoding: 'utf8'});
  } else {
    fs.writeFileSync(file, node.toString(), {encoding: 'utf8'});
  }
} else {
  console.log(node.toString());
}
